# This is a basic workflow to help you get started with Actions

name: CI-CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  CI:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Docker Login
        # You may pin to the exact commit or the version.
        # uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        uses: docker/login-action@v1.9.0
        with:
          # Server address of Docker registry. If not set then will default to Docker Hub
          # registry: # optional
          # Username used to log against the Docker registry
          username: ${{ secrets.DOCKERHUB_USER }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKERHUB_PWD }}
          # Log out from the Docker registry at the end of a job
          # logout: # optional, default is true      

      - name: Build and push Docker images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@e1b7f96249f2e4c8e4ac1519b9608c0d48944a1f
        uses: docker/build-push-action@v2.4.0
        with:
          # List of extra privileged entitlement (eg. network.host,security.insecure)
          # allow: # optional
          # List of build-time variables
          # build-args: # optional
          # Builder instance
          # builder: # optional
          # List of external cache sources for buildx (eg. user/app:cache, type=local,src=path/to/dir)
          # cache-from: # optional
          # List of cache export destinations for buildx (eg. user/app:cache, type=local,dest=path/to/dir)
          # cache-to: # optional
          # Build's context is the set of files located in the specified PATH or URL
          context: ./src
          # Path to the Dockerfile
          file: ./src/Dockerfile
          # List of metadata for an image
          # labels: # optional
          # Load is a shorthand for --output=type=docker
          # load: # optional, default is false
          # Set the networking mode for the RUN instructions during build
          # network: # optional
          # Do not use cache when building the image
          # no-cache: # optional, default is false
          # List of output destinations (format: type=local,dest=path)
          # outputs: # optional
          # List of target platforms for build
          # platforms: # optional
          # Always attempt to pull a newer version of the image
          # pull: # optional, default is false
          # Push is a shorthand for --output=type=registry
          push: true
          # List of secrets to expose to the build (eg. key=string, GIT_AUTH_TOKEN=mytoken)
          # secrets: # optional
          # List of secret files to expose to the build (eg. key=filename, MY_SECRET=./secret.txt)
          # secret-files: # optional
          # List of SSH agent socket or keys to expose to the build
          # ssh: # optional
          # List of tags
          tags: |
            flpinheiro/api-k8s-bootcamp-produto:${{github.run_number}}
            flpinheiro/api-k8s-bootcamp-produto:latest
          # Sets the target stage to build
          #target: # optional
          # GitHub Token used to authenticate against a repository for Git context
          # github-token: # optional, default is ${{ github.token }}

  CD:   
    runs-on: ubuntu-latest
    needs: [CI]
    steps: 
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          # Acceptable values: kubeconfig or service-account
          method: kubeconfig
          # Kubernetes Config
          kubeconfig: ${{ secrets.K8S_CONFIG }}
          # If your kubeconfig has multiple contexts, use this field to use a specific context, otherwise the default one would be chosen
          # context: # optional, default is 
          # Cluster Url
          # k8s-url: # optional, default is 
          # Service account secret. Run kubectl get serviceaccounts <service-account-name> -o yaml and copy the service-account-secret-name. Copy the ouptut of kubectl get secret <service-account-secret-name> -o yaml
          # k8s-secret: # optional, default is
          
      - name: Deploy mongodb
        uses: Azure/k8s-deploy@v1.3
        with:
          # Choose the target Kubernetes namespace. If the namespace is not provided, the commands will run in the default namespace.
          # namespace: # optional
          # Path to the manifest files which will be used for deployment.
          manifests: |
            k8s/mongodb/deployment.yml
            k8s/mongodb/service.yml
          # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
          # images: # optional
          # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
          # imagepullsecrets: # optional
          # Version of kubectl. Installs a specific version of kubectl binary
          # kubectl-version: # optional
          # Deployment strategy to be used. Allowed values are none, canary and blue-green
          # strategy: # optional, default is none
          # Route based on service, ingress or SMI for blue-green strategy
          # route-method: # optional, default is service
          # Indicates the buffer time in minutes before the switch is made to the green version (max is 300 min ie. 5hrs)
          # version-switch-buffer: # optional, default is 0
          # Traffic split method to be used. Allowed values are pod, smi
          # traffic-split-method: # optional, default is pod
          # Baseline and canary replicas count; valid value i.e between 0 to 100.
          # baseline-and-canary-replicas: # optional, default is 0
          # Percentage of traffic redirect to canary deployment
          # percentage: # optional, default is 0
          # Arguments
          # args: # optional
          # deploy/promote/reject
          # action: # default is deploy
          # Deploy when a previous deployment already exists. If true then --force argument is added to the apply command
          # force: # optional
          # Github token
          # token: # default is ${{ github.token }}          
      
      - name: Deploy api
        uses: Azure/k8s-deploy@v1.3
        with:
          # Choose the target Kubernetes namespace. If the namespace is not provided, the commands will run in the default namespace.
          # namespace: # optional
          # Path to the manifest files which will be used for deployment.
          manifests: |
            k8s/api/deployment.yml
            k8s/api/service.yml
          # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
          # images: # optional
          # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
          # imagepullsecrets: # optional
          # Version of kubectl. Installs a specific version of kubectl binary
          # kubectl-version: # optional
          # Deployment strategy to be used. Allowed values are none, canary and blue-green
          # strategy: # optional, default is none
          # Route based on service, ingress or SMI for blue-green strategy
          # route-method: # optional, default is service
          # Indicates the buffer time in minutes before the switch is made to the green version (max is 300 min ie. 5hrs)
          # version-switch-buffer: # optional, default is 0
          # Traffic split method to be used. Allowed values are pod, smi
          # traffic-split-method: # optional, default is pod
          # Baseline and canary replicas count; valid value i.e between 0 to 100.
          # baseline-and-canary-replicas: # optional, default is 0
          # Percentage of traffic redirect to canary deployment
          # percentage: # optional, default is 0
          # Arguments
          # args: # optional
          # deploy/promote/reject
          # action: # default is deploy
          # Deploy when a previous deployment already exists. If true then --force argument is added to the apply command
          # force: # optional
          # Github token
          # token: # default is ${{ github.token }}          
      
      
      
